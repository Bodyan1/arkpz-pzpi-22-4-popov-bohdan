???????????? ?????? ? ????? ???????
??????????? ???????????? ??????????? ????????????????


??????? "?????????? ?????????"






????

? ???????????? ?????? ? 2 ? ??????????
"?????? ?? ??????????? ????"









???????
??. ??. ????-22-4
????? ???????????????
??. ???????? ???. ?? ???????? ?. ?.







?????? 2024

1 ?????

1.1 ????

     ???????? ???? ????? ??? ????????? ??????? ?????????? ??????? ?? ??????????? ??????????? ?????????? (???).

1.2 ????

     ????????? ???? ????? ??? ????????? ??????? ?????????? ??????? ?? ??????????? ??????????? ??????????.

2 ???????? ???????

2.1 ???????? UML ???????? ??????????? ??? ????????? ??????? ???????

     ??? UML-???????? ??????????? ???? ?????? ???????: ??????? ?????????? (Car Owner) ?? ????????????? (Admin). ?????????? ????????? ???? ???????:
     * ?????????? ???????????;
     * ??????????? ???????????;
     * ???????? ??????? ???????????????? ?? ?????????? ????? ??????????;
     * ????????? ???????????? ???? ?????????? ??????????????;
     * ????????? ????????? ??? ????????? ???? ?? ?????;
     * CRUD-???????? ??? ?????????? ?????? ??? ??????????? ??????, ???????????? ?? ???????????? (??? ??????????????).
     ?? ?????? ?????????? ??????? ? ??????????? ?????????? UML-????????, ???????????? ?? ??????? 2.1.



???. 2.1 - UML ???????? ???????????

2.2 ???????? ER ???????? ?????

     User (??????????) - ?????????? ??? ????????? ???????????; Vehicle (??????????) - ???? ??? ????????????? ??????????? ??????; LocationHistory (??????? ????????????????) - GPS-?????????? ????????????? ??????; VehicleStatus (???? ??????????) - ???????? ?????????, ???? ?? ??????????? ???????, ???? ? ????? ????; Recommendation (????????????) - ??????????????? ?????? ??? ???????????? ???? ??????????????; Notification (??????????) - ???????????? ??? ???? ?????????? ??? ?????; Admin (?????????????) - ???? ??? ??????????????? ???????.
     ?? ??????? 2.2 ???????????? ER-???????? ?????, ?? ?????????? ????????'???? ??? ?????????.
     

???. 2.2 - ER ???????? ?????

                               3. ???????? ???? ?????

3.1 ??????????? ???? ????? ?????????? ??????? ??? ???????? ? ??????? ?

     ??? ???????? ? ??????? ?.
     ???????? ???? ????? ??? ?????????? ??????? AutoTrack ???????????? ? ??????????? ????? ???? ?????????? ?? ??????? ????? ??? ????????????, ??????????? ??????, ??????? ????????????????, ????????? ???? ??????????? ?? ???? ??????? ??????? ???????. ??? ???? ???? ??????? ??????? ?? ?????? MongoDB - ??????????-???????????? ???? ?????, ??? ?????????? ?????? ????????? ?? ???????????????, ???????? ? ????????? ?????? ? ?????? IoT-????????? ? ????????? ????????'?????? ??? ??????? ??????????.
     ????????? ???? ????? ??????????? ? ????????? ???????? ????????:
     3.1.1 ???????? users
     ???????? ??????? ???? ??? ???????????? ???????. ????? ???????? ???? ???????? ??????????? ?????????? ??? ???????????, ???? ?? ??'?, ?????????? ?????, ??????, ??????? ?? ???? (?????????? ??? ?????????????).
     3.1.2 ???????? vehicles
     ?? ???????? ???????? ???? ??? ??????????? ??????. ????????? ??????? ?????????? ??? ?????, ??????, ??? ???????, VIN-??? ?? ????????? ?? ???????????-????????.
     3.1.3 ???????? location_history
     ???????? ??????? GPS-?????????? ????????????? ??????. ????? ???????? ??????? ????????????? ????????????? ??????, ??????, ???????, ? ????? ???? ? ??? ??????.
     3.1.4 ???????? vehicle_status
     ?? ???????? ???????? ????????? ???? ??????????. ????????? ????????? ???? ?????????, ?? ??????????? ???????, ???? ? ?????, ?????? ???????? ?? ???? ??????.
     3.1.5 ???????? recommendations
     ???????? ??????? ??????????????? ???????????? ??? ???????????? ?? ?????? ??????? ????? ??? ???????????? ?????. ????????? ????????? ????? ????????????, ???? ????????? ?? ????????????? ????????????? ??????.
     3.1.6 ???????? notifications
     ?? ???????? ???????? ?????????? ??? ????????????, ???? ?? ??????????? ??? ???????? ?????????????? ??? ???????????? ??? ????????. ????????? ????????? ????? ????????????, ?????? ?????????? ?? ???? ?????????.
     ??'???? ??? ??????????
     ???????? ???'????? ??? ????? ????? ???? ???? ObjectId, ?? ???????? ???????????? ??'???? ??? ???????????:
     * users - ??????? ????????, ?? ??????? ?????????? ??? ????????????.
     * vehicles ???'????? ? users ????? ???? user_id.
     * location_history ?? vehicle_status ???'????? ? vehicles ????? ???? vehicle_id.
     * recommendations ? notifications ?????? ???? ???'????? ?? ? vehicles, ??? ? ? users.
     ???????????? Mongoose ??? ?????? ? MongoDB
     ??? ?????? ? ????? ????? ???????????????? Mongoose, ?? ??????? ????????? ???????, ????????? ????? ?? ????????? ? MongoDB. Mongoose ????????? ?????????? ???? ?????, ?????? ??????????? ??????????? ?? ??????????, ? ????? ???????????????? ??? ??'????? ??? ??????????? ????? ref.
     ???? ???????????? ???? ????? ?????????? ????????? ?????????? ? ??????? ????? ?? ???????? ???????????? ??????? ? ???????????.

     3.2 ???????? ???????? ????????? ???? ?????
????? ????????? ???? ?????, ???? ?????????? ???????? ????????? ???? ????? (???. ???. 3.1). 


???. 3.1 - ???????? ????????? ???? ?????

4	???????? ????????? ???????

4.2 ???????? ??? ??? ????????? ????????? ??????? ? ?????????
    ??? ?????????? ????????? ??????? ??????? AutoTrack ???? ?????????? ???????? ?? ??????????, ?? ???????????? ?????????? ??? ??????????, ???????????, ?????????? ????????????? ????????, ????????? ??????? ???????????????? ?? ????? ??????????.
    4.2.1 ????????:
    * POST /registration - ??????? ??? ?????????? ?????? ???????????.
    * POST /login - ??????? ??? ??????????? ???????????.
    * POST /logout - ??????? ??? ?????? ???????????.
    * GET /activate/:link - ??????? ??? ????????? ??????? ????? ????????? ?????????.
    * GET /refresh - ??????? ??? ????????? ????? ?? ????????? refresh ??????.
    * GET /users - ??????? ??? ????????? ?????? ???? ???????????? (????????? ???? ???????????????).
    * GET /vehicles - ??????? ??? ????????? ?????? ???????????? ??????? ???????????.
    * POST /vehicles - ??????? ??? ????????? ?????? ????????????? ??????.
    * GET /vehicles/:id/location-history - ??????? ??? ????????? ??????? ???????????????? ??????????.
    * GET /vehicles/:id/status - ??????? ??? ????????? ?????????? ????? ??????????.
    4.2.2 ??????????:
    UserController:
    * registration: ?????????? ??????????? ? ?????????? ?????. ??? ???????? ?????????? ??????????? refresh ?????, ???? ???????????? ? cookie.
    * login: ??????????? ??????????? ? ?????????? ???????? ????? ?? ????????????? ?????????? ? ???? ?????. ??? ????????? ????? ??????????? refresh ?????.
    * logout: ????? ??????????? ????? ????????? refresh ?????? ? cookies.
    * activate: ????????? ??????????? ?? ????????? ????????????? ?????????, ??? ???????????? ?? email ????? ??????????.
    * refresh: ????????? ??????? ??? ??????????? ????? ??? ????????? ???????????.
    * getUsers: ????????? ?????? ???? ???????????? (???????? ???? ???????????????).
    VehicleController:
    * getVehicles: ????????? ?????? ???????????? ???????, ???'?????? ?? ????????????.
    * addVehicle: ????????? ?????? ?????????? ?? ???????.
    * getLocationHistory: ????????? ??????? GPS-????????? ??? ??????????? ??????????.
    * getVehicleStatus: ????????? ?????????? ????? ?????????? (??????????? ???????, ???? ? ????? ????).
    4.2.3 ??? ??????????:
    ???????? ? ??????? ?.
    ??? ????? ????????? ? ??????????? ?????????? ?????? ???????????????? ??????? AutoTrack ??? ?????????? ?? ??????????? ????????????, ?????????? ????????????? ????????, ? ????? ????????? ???????? ????? ??? ??????????.
    ?? ??????? 4.1 ???????????? ????????? ?????????? API.
    

      ???. 4.1 - ????????? ?????????? ??? ???
5	????????

     ? ??????? ????????? ???????????? ?????? ???? ?????????? UML-???????? ??????????? ??? ????????? ??????? ??????? AutoTrack ?? ER-???????? ?????. ?? ?????? ??? ??????? ???? ???????? ???? ????? ??? ?????????? ???????. ????? ???? ?????????? ???????? ????????? ???? ?????. ??? ?????? ? ???? ????? ????? ?????????? ???????, ? ????? ???????? API ??? ???????????? ????????? ????????? ??????? ? ?????????. ???????????? ?????? ????? ????????? ?????????? ???????????? API.
     ????????? ?? ?????: 


     
??????? ?



1  const express = require('express');
2  const mongoose = require('mongoose');
3  const bodyParser = require('body-parser');
4  
5  // ??????????? ?? MongoDB
6  mongoose.connect('mongodb://localhost:27017/your_project', {
7    useNewUrlParser: true,
8    useUnifiedTopology: true,
9  });
10 
11 // ????????? ???? ?? ???????
12 
13 // ????? ???????????
14 const userSchema = new mongoose.Schema({
15   first_name: { type: String, required: true },
16   last_name: { type: String, required: true },
17   email: { type: String, required: true, unique: true },
18   password_hash: { type: String, required: true },
19   phone: String,
20   role: { type: String, enum: ['User', 'Admin'], required: true },
21   created_at: { type: Date, default: Date.now },
22   updated_at: { type: Date, default: Date.now },
23 });
24 
25 const User = mongoose.model('User', userSchema);
26 
27 // ????? ??????? ??? ??????????
28 const activitySchema = new mongoose.Schema({
29   user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
30   type: { type: String, required: true },
31   duration: Number,
32   date: { type: Date, default: Date.now },
33   created_at: { type: Date, default: Date.now },
34   updated_at: { type: Date, default: Date.now },
35 });
36 
37 const Activity = mongoose.model('Activity', activitySchema);
38 
39 // ????? ??? ?????????
40 const notificationSchema = new mongoose.Schema({
41   user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
42   message: { type: String, required: true },
43   type: { type: String, enum: ['Reminder', 'Alert', 'Info'], required: true },
44   status: { type: String, enum: ['Sent', 'Pending', 'Failed'], default: 'Pending' },
45   created_at: { type: Date, default: Date.now },
46   updated_at: { type: Date, default: Date.now },
47 });
48 
49 const Notification = mongoose.model('Notification', notificationSchema);
50 
51 // ????????????? Express
52 const app = express();
53 app.use(bodyParser.json());
54 
55 // ??????? ??? ????????? ???????????
56 app.post('/users', async (req, res) => {
57   try {
58     const user = new User(req.body);
59     await user.save();
60     res.status(201).json(user);
61   } catch (error) {
62     res.status(400).json({ message: error.message });
63   }
64 });
65 
66 // ??????? ??? ????????? ???? ????????????
67 app.get('/users', async (req, res) => {
68   try {
69     const users = await User.find();
70     res.status(200).json(users);
71   } catch (error) {
72     res.status(400).json({ message: error.message });
73   }
74 });
75 
76 // ??????? ??? ????????? ??????????
77 app.post('/activities', async (req, res) => {
78   try {
79     const activity = new Activity(req.body);
80     await activity.save();
81     res.status(201).json(activity);
82   } catch (error) {
83     res.status(400).json({ message: error.message });
84   }
85 });
86 
87 // ??????? ??? ????????? ???? ???????????
88 app.get('/activities', async (req, res) => {
89   try {
90     const activities = await Activity.find().populate('user_id', 'first_name last_name email');
91     res.status(200).json(activities);
92   } catch (error) {
93     res.status(400).json({ message: error.message });
94   }
95 });
96 
97 // ?????? ???????
98 const PORT = 3000;
99 app.listen(PORT, () => {
100   console.log(`Server is running on port ${PORT}`);
101 });
??????? ?

1  const UserModel = require("../models/user-model");
2  const bcrypt = require("bcrypt");
3  const uuid = require("uuid");
4  
5  const tokenService = require("./token-service");
6  const UserDto = require("../dtos/user-dto");
7  const ApiError = require("../exceptions/api-error");
8  
9  class UserService {
10   async registration(email, password) {
11     const candidate = await UserModel.findOne({ email });
12     if (candidate) {
13       throw ApiError.BadRequest(
14         `User with email address ${email} already exists`
15       );
16     }
17     const hashPassword = await bcrypt.hash(password, 3);
18     const activationLink = uuid.v4(); // v34fa-asfasf-142saf-sa-asf
19  
20     const user = await UserModel.create({
21       email,
22       password: hashPassword,
23       activationLink,
24     });
25  
26     const userDto = new UserDto(user); // id, email, isActivated
27     const tokens = tokenService.generateTokens({ ...userDto });
28     await tokenService.saveToken(userDto.id, tokens.refreshToken);
29  
30     return { ...tokens, user: userDto };
31   }
32  
33   async activate(activationLink) {
34     const user = await UserModel.findOne({ activationLink });
35     if (!user) {
36       throw ApiError.BadRequest("Incorrect activation link");
37     }
38     user.isActivated = true;
39     await user.save();
40   }
41  
42   async login(email, password) {
43     const user = await UserModel.findOne({ email });
44     if (!user) {
45       throw ApiError.BadRequest("User with this email was not found");
46     }
47     const isPassEquals = await bcrypt.compare(password, user.password);
48     if (!isPassEquals) {
49       throw ApiError.BadRequest("Invalid password");
50     }
51     const userDto = new UserDto(user);
52     const tokens = tokenService.generateTokens({ ...userDto });
53  
54     await tokenService.saveToken(userDto.id, tokens.refreshToken);
55     return { ...tokens, user: userDto };
56   }
57  
58   async logout(refreshToken) {
59     const token = await tokenService.removeToken(refreshToken);
60     return token;
61   }
62  
63   async refresh(refreshToken) {
64     if (!refreshToken) {
65       throw ApiError.UnauthorizedError();
66     }
67     const userData = tokenService.validateRefreshToken(refreshToken);
68     const tokenFromDb = await tokenService.findToken(refreshToken);
69     if (!userData || !tokenFromDb) {
70       throw ApiError.UnauthorizedError();
71     }
72     const user = await UserModel.findById(userData.id);
73     const userDto = new UserDto(user);
74     const tokens = tokenService.generateTokens({ ...userDto });
75  
76     await tokenService.saveToken(userDto.id, tokens.refreshToken);
77     return { ...tokens, user: userDto };
78   }
79  
80   async getAllUsers() {
81     const users = await UserModel.find();
82     return users;
83   }
84 }
85  
86 module.exports = new UserService();



